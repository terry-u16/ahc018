mod acl;
mod common;
mod gaussean_process;
mod input;
mod map;
mod network;
mod output;
mod solver;

use std::{
    io::{self, BufReader},
    time::Instant,
};

use itertools::Itertools;
use nalgebra::{DMatrix, DVector};
use output::{output, DiggingResult};
use proconio::source::line::LineSource;
#[allow(unused_imports)]
use proconio::*;
#[allow(unused_imports)]
use rand::prelude::*;

use crate::{gaussean_process::GaussianPredictor, input::Input, solver::Solver};

pub trait ChangeMinMax {
    fn change_min(&mut self, v: Self) -> bool;
    fn change_max(&mut self, v: Self) -> bool;
}

impl<T: PartialOrd> ChangeMinMax for T {
    fn change_min(&mut self, v: T) -> bool {
        *self > v && {
            *self = v;
            true
        }
    }

    fn change_max(&mut self, v: T) -> bool {
        *self < v && {
            *self = v;
            true
        }
    }
}

#[allow(unused_macros)]
macro_rules! mat {
    ($e:expr; $d:expr) => { vec![$e; $d] };
    ($e:expr; $d:expr $(; $ds:expr)+) => { vec![mat![$e $(; $ds)*]; $d] };
}

fn main() {
    /*
    let mut gauss = GaussianPredictor::new();
    let x = vec![
        0., 566., 204., 559., 430., 226., 460., 285., 7., 164., 433., 349., 160., 221., 345., 105.,
        95., 390., 100., 368., 353., 271., 45., 471., 550., 128., 388., 81., 301., 371., 197., 72.,
        47., 234., 297., 82., 239., 104., 465., 374., 167., 380., 364., 215., 274., 74., 176.,
        547., 251., 168., 474., 389., 277., 225., 333., 58., 235., 33., 324., 411., 275., 68.,
        217., 323., 218., 512., 406., 470., 147., 272., 143., 253., 552., 270., 439., 409., 142.,
        522., 506., 94., 49., 113., 157., 66., 395., 391., 480., 542., 258., 12., 118., 115., 446.,
        162., 4., 513., 183., 520., 109., 306., 383., 166.,
    ];
    let y: Vec<f64> = vec![
        232., 372., 200., 113., 234., 23., 47., 11., 58., 11., 224., 14., 18., 28., 16., 224.,
        259., 19., 226., 10., 14., 50., 42., 357., 123., 93., 13., 68., 10., 10., 694., 27., 24.,
        18., 10., 76., 15., 213., 57., 10., 10., 10., 11., 54., 23., 30., 11., 116., 31., 10.,
        458., 15., 14., 23., 14., 16., 17., 168., 20., 101., 18., 23., 42., 19., 37., 45., 150.,
        283., 146., 39., 199., 49., 136., 62., 248., 129., 205., 208., 20., 250., 17., 305., 33.,
        22., 61., 24., 257., 111., 81., 21., 268., 293., 498., 13., 130., 55., 31., 202., 287.,
        10., 10., 10.,
    ];

    for i in 0..x.len() {
        gauss.add_data(DVector::from_element(1, x[i]), y[i].sqrt());
    }

    gauss.grid_search_theta(
        &(4..8).map(|v| 2.0f64.powi(v)).collect_vec(),
        &(3..6)
            .map(|v| {
                let v = 2.0f64.powi(v);
                v * v
            })
            .collect_vec(),
        &(0..4).map(|v| 2.0f64.powi(v)).collect_vec(),
    );

    let x_test = vec![
        0., 1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19.,
        20., 21., 22., 23., 24., 25., 26., 27., 28., 29., 30., 31., 32., 33., 34., 35., 36., 37.,
        38., 39., 40., 41., 42., 43., 44., 45., 46., 47., 48., 49., 50., 51., 52., 53., 54., 55.,
        56., 57., 58., 59., 60., 61., 62., 63., 64., 65., 66., 67., 68., 69., 70., 71., 72., 73.,
        74., 75., 76., 77., 78., 79., 80., 81., 82., 83., 84., 85., 86., 87., 88., 89., 90., 91.,
        92., 93., 94., 95., 96., 97., 98., 99., 100., 101., 102., 103., 104., 105., 106., 107.,
        108., 109., 110., 111., 112., 113., 114., 115., 116., 117., 118., 119., 120., 121., 122.,
        123., 124., 125., 126., 127., 128., 129., 130., 131., 132., 133., 134., 135., 136., 137.,
        138., 139., 140., 141., 142., 143., 144., 145., 146., 147., 148., 149., 150., 151., 152.,
        153., 154., 155., 156., 157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167.,
        168., 169., 170., 171., 172., 173., 174., 175., 176., 177., 178., 179., 180., 181., 182.,
        183., 184., 185., 186., 187., 188., 189., 190., 191., 192., 193., 194., 195., 196., 197.,
        198., 199., 200., 201., 202., 203., 204., 205., 206., 207., 208., 209., 210., 211., 212.,
        213., 214., 215., 216., 217., 218., 219., 220., 221., 222., 223., 224., 225., 226., 227.,
        228., 229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239., 240., 241., 242.,
        243., 244., 245., 246., 247., 248., 249., 250., 251., 252., 253., 254., 255., 256., 257.,
        258., 259., 260., 261., 262., 263., 264., 265., 266., 267., 268., 269., 270., 271., 272.,
        273., 274., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287.,
        288., 289., 290., 291., 292., 293., 294., 295., 296., 297., 298., 299., 300., 301., 302.,
        303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 313., 314., 315., 316., 317.,
        318., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332.,
        333., 334., 335., 336., 337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 347.,
        348., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362.,
        363., 364., 365., 366., 367., 368., 369., 370., 371., 372., 373., 374., 375., 376., 377.,
        378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392.,
        393., 394., 395., 396., 397., 398., 399., 400., 401., 402., 403., 404., 405., 406., 407.,
        408., 409., 410., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422.,
        423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 433., 434., 435., 436., 437.,
        438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448., 449., 450., 451., 452.,
        453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467.,
        468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 481., 482.,
        483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497.,
        498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512.,
        513., 514., 515., 516., 517., 518., 519., 520., 521., 522., 523., 524., 525., 526., 527.,
        528., 529., 530., 531., 532., 533., 534., 535., 536., 537., 538., 539., 540., 541., 542.,
        543., 544., 545., 546., 547., 548., 549., 550., 551., 552., 553., 554., 555., 556., 557.,
        558., 559., 560., 561., 562., 563., 564., 565., 566.,
    ];

    let x_test = (0..2000).map(|v| v as f64).collect_vec();
    let x_test = DMatrix::from_vec(x_test.len(), 1, x_test);
    let (y_mu, y_var) = gauss.gaussian_process_regression(&x_test);
    for (i, (&y_mu, &y_var)) in y_mu.iter().zip(y_var.iter()).enumerate() {
        let lower = y_mu - y_var.sqrt();
        let upper = y_mu + y_var.sqrt();
        eprintln!(
            "{}, {}, {}, {}",
            i,
            lower * lower,
            y_mu * y_mu,
            upper * upper
        );
    }*/

    let mut stdin = LineSource::new(BufReader::new(io::stdin()));
    let input = Input::read(&mut stdin);
    let mut solver = Solver::new(&input);

    loop {
        let action = solver.get_next_action();
        let result = output(action, "", &mut stdin);

        if let DiggingResult::Completed = result {
            break;
        }

        solver.update(result);
    }

    let elapsed = Instant::now() - input.since;
    eprintln!("{:.3}s", elapsed.as_secs_f64());
}
